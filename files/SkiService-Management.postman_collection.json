{
	"info": {
		"_postman_id": "8c7d34cf-b4e3-4211-b8d6-08ee54ec882c",
		"name": "SkiService-Management",
		"description": "Set 100ms delay while testing to reduce procedural errors",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18842395",
		"_collection_link": "https://fokklzdev.postman.co/workspace/3d3c32c6-ccc2-48b4-8159-821e82a228a5/collection/18842395-8c7d34cf-b4e3-4211-b8d6-08ee54ec882c?action=share&source=collection_link&creator=18842395"
	},
	"item": [
		{
			"name": "Logins",
			"item": [
				{
					"name": "Mitarbeiter 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.auth.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"'Mitarbeiter 1' in username\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.username).to.be.a('string').and.to.equal('Mitarbeiter 1')\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set('token', jsonData.auth.token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Mitarbeiter 1\",\r\n    \"password\": \"m1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/users/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404, since its only a dummy route to remove the token\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set('token', null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api"
							]
						}
					},
					"response": []
				},
				{
					"name": "Superadmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.auth.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"'Superadmin' in username\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.username).to.be.a('string').and.to.equal('Superadmin')\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set('token', jsonData.auth.token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Superadmin\",\r\n    \"password\": \"super\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/users/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "GetAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response is an array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/users",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The username field is the just sent value\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.username).to.be.a('string').and.to.equal(pm.variables.get('uuid'))\r",
									"});\r",
									"\r",
									"var data = pm.response.json();\r",
									"pm.variables.set('created_user', data.id);\r",
									"pm.variables.set('created_user_name', data.username);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"uuid\", require('uuid').v4());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{uuid}}\", // to avoid unique contraint violation\r\n  \"password\": \"einnutzer\"\r\n  //\"locked\": true,\r\n  //\"role\": 0\r\n    // 0 - Mitarbeiter\r\n    // 1 - Superadmin\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/users",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should have username 'Superadmin'\", function () {\r",
									"     pm.expect(pm.response.json().username).to.equal('Superadmin');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/users/me",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"responseData.locked should be boolean and true\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.locked).to.be.a('boolean').and.to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locked\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/users/{{created_user}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"users",
								"{{created_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The username field is the before created\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.username).to.be.a('string').and.to.equal(pm.variables.get('created_user_name'))\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/users/{{created_user}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"users",
								"{{created_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/users/{{created_user}}/unlock",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"users",
								"{{created_user}}",
								"unlock"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Returned id matches the created user\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.id).to.equal(pm.variables.get('created_user'));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/users/{{created_user}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"users",
								"{{created_user}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Name should be a string in the response\", function () {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.equal('string')\r",
									"});\r",
									"\r",
									"var data = pm.response.json();\r",
									"\r",
									"pm.variables.set('created_order', data.id);\r",
									"pm.variables.set('created_order_name', data.name);\r",
									"pm.variables.set('created_order_service', data.service.id);\r",
									"pm.variables.set('created_order_priority', data.priority.id);\r",
									"pm.variables.set('created_order_state', data.state.id);\r",
									"pm.variables.set('created_order_user', data.user?.id ?? null)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"serviceId\": 1,\r\n  \"priorityId\": 1,\r\n  \"stateId\": 1,\r\n  //\"userId\": 10,\r\n  \"name\": \"string\",\r\n  \"email\": \"user@example.com\",\r\n  \"phone\": \"+15703464918\"\r\n  //\"note\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/orders",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the response is an array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/orders",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The name field is the before created\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.name).to.be.a('string').and.to.equal(pm.variables.get('created_order_name'))\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/orders/{{created_order}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"orders",
								"{{created_order}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has user property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('user');\r",
									"});\r",
									"\r",
									"pm.test(\"user.id is 10\", function () {\r",
									"    pm.expect(pm.response.json().user.id).to.equal(10);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"serviceId\": 2,\r\n  \"priorityId\": 2,\r\n  \"stateId\": 2,\r\n  \"userId\": 10,\r\n  \"name\": \"string\",\r\n  \"email\": \"user@example.com\",\r\n  \"phone\": \"4689371281\",\r\n  \"note\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/orders/{{created_order}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"orders",
								"{{created_order}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Returned id should be the one created before\", function () {\r",
									"    pm.expect(pm.response.json().id).to.equal(pm.variables.get(\"created_order\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/orders/{{created_order}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"orders",
								"{{created_order}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetByUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the response is an array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/orders/user/10",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"orders",
								"user",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetByState",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the response is an array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/orders/state/2",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"orders",
								"state",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetByService",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the response is an array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/orders/service/2",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"orders",
								"service",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetByPriority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the response is an array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/orders/priority/2",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"orders",
								"priority",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "States",
			"item": [
				{
					"name": "GetAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the response is an array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/states",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"states"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Name should be 'string'\", function () {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.equal('string')\r",
									"});\r",
									"\r",
									"var data = pm.response.json();\r",
									"\r",
									"pm.variables.set('created_state', data.id);\r",
									"pm.variables.set('created_state_name', data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/states",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"states"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The name field is the before created\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.name).to.be.a('string').and.to.equal(pm.variables.get('created_state_name'))\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/states/{{created_state}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"states",
								"{{created_state}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The name field is the newly updated\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.name).to.be.a('string').and.to.equal('AnotherString')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"AnotherString\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/states/{{created_state}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"states",
								"{{created_state}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Returned id should be the one created before\", function () {\r",
									"    pm.expect(pm.response.json().id).to.equal(pm.variables.get(\"created_state\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/states/{{created_state}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"states",
								"{{created_state}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Services",
			"item": [
				{
					"name": "GetAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the response is an array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/services",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Name should be 'string'\", function () {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.equal('string')\r",
									"});\r",
									"\r",
									"var data = pm.response.json();\r",
									"\r",
									"pm.variables.set('created_service', data.id);\r",
									"pm.variables.set('created_service_name', data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"price\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/services",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The name field is the before created\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.name).to.be.a('string').and.to.equal(pm.variables.get('created_service_name'))\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/services/{{created_service}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"services",
								"{{created_service}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The name field is the newly updated\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.name).to.be.a('string').and.to.equal('AnotherString')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"AnotherString\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/services/{{created_service}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"services",
								"{{created_service}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Returned id should be the one created before\", function () {\r",
									"    pm.expect(pm.response.json().id).to.equal(pm.variables.get(\"created_service\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/services/{{created_service}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"services",
								"{{created_service}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Priority",
			"item": [
				{
					"name": "GetAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the response is an array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/priorities",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"priorities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Name should be 'string'\", function () {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.equal('string')\r",
									"});\r",
									"\r",
									"var data = pm.response.json();\r",
									"\r",
									"pm.variables.set('created_priority', data.id);\r",
									"pm.variables.set('created_priority_name', data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"string\",\r\n  \"days\": 365\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/priorities",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"priorities"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The name field is the before created\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.name).to.be.a('string').and.to.equal(pm.variables.get('created_priority_name'))\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/priorities/{{created_priority}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"priorities",
								"{{created_priority}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The name field is the newly updated\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.name).to.be.a('string').and.to.equal('AnotherString')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"AnotherString\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/api/priorities/{{created_priority}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"priorities",
								"{{created_priority}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Returned id should be the one created before\", function () {\r",
									"    pm.expect(pm.response.json().id).to.equal(pm.variables.get(\"created_priority\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/priorities/{{created_priority}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"priorities",
								"{{created_priority}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "HOST",
			"value": "https://localhost:7155",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		}
	]
}